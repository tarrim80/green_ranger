"""create_db_initial_migration

Revision ID: d5b27e0c58e4
Revises:
Create Date: 2025-06-10 16:36:38.686738

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from geoalchemy2 import Geometry
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "d5b27e0c58e4"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "damage",
        sa.Column(
            "name",
            sa.String(length=100),
            nullable=False,
            comment="Наименование типа повреждения",
        ),
        sa.Column(
            "description",
            sa.Text(),
            nullable=True,
            comment="Общее описание типа повреждения",
        ),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "photo",
        sa.Column(
            "file_path",
            sa.String(length=255),
            nullable=False,
            comment="Путь к файлу изображения на сервере",
        ),
        sa.Column(
            "uploaded_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Дата и время загрузки фото",
        ),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "user",
        sa.Column("telegram_id", sa.BigInteger(), nullable=False),
        sa.Column("name", sa.String(length=255), nullable=True),
        sa.Column("email", sa.String(length=320), nullable=False),
        sa.Column("hashed_password", sa.String(length=1024), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("is_superuser", sa.Boolean(), nullable=False),
        sa.Column("is_verified", sa.Boolean(), nullable=False),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_user_email"), "user", ["email"], unique=True)
    op.create_index(
        op.f("ix_user_telegram_id"), "user", ["telegram_id"], unique=True
    )
    op.create_table(
        "team",
        sa.Column(
            "name",
            sa.String(length=50),
            nullable=False,
            comment="Название команды",
        ),
        sa.Column(
            "leader_id",
            sa.Integer(),
            nullable=False,
            comment="ID пользователя-лидера команды",
        ),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.ForeignKeyConstraint(
            ["leader_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("leader_id"),
        sa.UniqueConstraint("name"),
    )
    op.create_geospatial_table(
        "sector",
        sa.Column(
            "name",
            sa.String(length=50),
            nullable=False,
            comment="Название или номер сектора",
        ),
        sa.Column(
            "curator_id",
            sa.Integer(),
            nullable=False,
            comment="ID куратора сектора",
        ),
        sa.Column(
            "team_id",
            sa.Integer(),
            nullable=True,
            comment="ID команды, назначенной на участок",
        ),
        sa.Column(
            "color",
            sa.String(length=7),
            nullable=False,
            comment="Цвет для отображения сектора на карте (HEX)",
        ),
        sa.Column(
            "geometry",
            Geometry(
                geometry_type="POLYGON",
                srid=4326,
                spatial_index=False,
                from_text="ST_GeomFromEWKT",
                name="geometry",
                nullable=False,
            ),
            nullable=False,
            comment="Геометрия (полигон) сектора",
        ),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.ForeignKeyConstraint(
            ["curator_id"],
            ["user.id"],
        ),
        sa.ForeignKeyConstraint(
            ["team_id"],
            ["team.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_geospatial_index(
        "idx_sector_geometry",
        "sector",
        ["geometry"],
        unique=False,
        postgresql_using="gist",
        postgresql_ops={},
    )
    op.create_geospatial_table(
        "ticket",
        sa.Column(
            "planting",
            sa.String(length=50),
            nullable=False,
            comment="Вид насаждений",
        ),
        sa.Column(
            "species",
            sa.String(length=50),
            nullable=False,
            comment="Порода растения",
        ),
        sa.Column(
            "description",
            sa.Text(),
            nullable=False,
            comment="Описание растения",
        ),
        sa.Column(
            "age", sa.Integer(), nullable=True, comment="Возраст растения"
        ),
        sa.Column(
            "height",
            sa.Float(),
            nullable=True,
            comment="Высота растения в метрах",
        ),
        sa.Column(
            "diameter",
            sa.Float(),
            nullable=True,
            comment="Диаметр ствола на высоте груди в см",
        ),
        sa.Column(
            "trunk_count",
            sa.Integer(),
            nullable=False,
            comment="Количество стволов",
        ),
        sa.Column(
            "condition",
            postgresql.ENUM(
                "HEALTHY",
                "WEAKENED",
                "OPPRESSED",
                "DRYING",
                "EMERGENCY_DEAD",
                name="tree_condition_enum",
            ),
            nullable=False,
            comment="КСО",
        ),
        sa.Column(
            "location",
            Geometry(
                geometry_type="POINT",
                srid=4326,
                spatial_index=False,
                from_text="ST_GeomFromEWKT",
                name="geometry",
                nullable=False,
            ),
            nullable=False,
            comment="Местоположение растения",
        ),
        sa.Column(
            "azimuth",
            sa.Float(),
            nullable=True,
            comment="Азимут от точки привязки",
        ),
        sa.Column(
            "distance",
            sa.Float(),
            nullable=True,
            comment="Расстояние от точки привязки в метрах",
        ),
        sa.Column(
            "sector_id",
            sa.Integer(),
            nullable=False,
            comment="Учетный участок",
        ),
        sa.Column(
            "curator_id",
            sa.Integer(),
            nullable=False,
            comment="ID куратора участка",
        ),
        sa.Column(
            "is_emergency",
            sa.Boolean(),
            nullable=False,
            comment="Признак аварийности/срочности",
        ),
        sa.Column(
            "author_id",
            sa.Integer(),
            nullable=False,
            comment="ID автора заявки",
        ),
        sa.Column(
            "ticket_status",
            postgresql.ENUM(
                "NEW",
                "CONFIRMED",
                "IN_PROGRESS",
                "COMPLETED",
                "POSTPONED",
                "CANCELLED",
                "REMOVED",
                name="ticket_status_enum",
            ),
            nullable=False,
            comment="Код статуса заявки",
        ),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Дата и время создания заявки",
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Дата и время изменения заявки",
        ),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.ForeignKeyConstraint(
            ["author_id"],
            ["user.id"],
        ),
        sa.ForeignKeyConstraint(
            ["curator_id"],
            ["user.id"],
        ),
        sa.ForeignKeyConstraint(
            ["sector_id"],
            ["sector.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_geospatial_index(
        "idx_ticket_location",
        "ticket",
        ["location"],
        unique=False,
        postgresql_using="gist",
        postgresql_ops={},
    )
    op.create_table(
        "ticket_damage",
        sa.Column(
            "ticket_id", sa.Integer(), nullable=False, comment="ID заявки"
        ),
        sa.Column(
            "damage_id",
            sa.Integer(),
            nullable=False,
            comment="ID типа повреждения из справочника",
        ),
        sa.Column(
            "damage_status",
            postgresql.ENUM(
                "ACTIVE",
                "PROCESSING",
                "RESOLVED",
                "NO_ACTION_NEEDED",
                "MONITORING",
                name="damage_status_enum",
            ),
            nullable=False,
            comment="Код статуса обработки этого повреждения",
        ),
        sa.Column(
            "description",
            sa.Text(),
            nullable=True,
            comment="Описание повреждения",
        ),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.ForeignKeyConstraint(
            ["damage_id"],
            ["damage.id"],
        ),
        sa.ForeignKeyConstraint(
            ["ticket_id"],
            ["ticket.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "ticket_photo",
        sa.Column(
            "ticket_id", sa.Integer(), nullable=False, comment="ID заявки"
        ),
        sa.Column(
            "photo_id", sa.Integer(), nullable=False, comment="ID фотографии"
        ),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.ForeignKeyConstraint(
            ["photo_id"],
            ["photo.id"],
        ),
        sa.ForeignKeyConstraint(
            ["ticket_id"],
            ["ticket.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "ticket_damage_photo",
        sa.Column(
            "ticket_damage_id",
            sa.Integer(),
            nullable=False,
            comment="ID зафиксированного повреждения",
        ),
        sa.Column(
            "photo_id", sa.Integer(), nullable=False, comment="ID фотографии"
        ),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.ForeignKeyConstraint(
            ["photo_id"],
            ["photo.id"],
        ),
        sa.ForeignKeyConstraint(
            ["ticket_damage_id"],
            ["ticket_damage.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("ticket_damage_photo")
    op.drop_table("ticket_photo")
    op.drop_table("ticket_damage")
    op.drop_geospatial_index(
        "idx_ticket_location",
        table_name="ticket",
        postgresql_using="gist",
        column_name="location",
    )
    op.drop_geospatial_table("ticket")
    op.drop_geospatial_index(
        "idx_sector_geometry",
        table_name="sector",
        postgresql_using="gist",
        column_name="geometry",
    )
    op.drop_geospatial_table("sector")
    op.drop_table("team")
    op.drop_index(op.f("ix_user_telegram_id"), table_name="user")
    op.drop_index(op.f("ix_user_email"), table_name="user")
    op.drop_table("user")
    op.drop_table("photo")
    op.drop_table("damage")
    op.execute("DROP TYPE IF EXISTS damage_status_enum;")
    op.execute("DROP TYPE IF EXISTS ticket_status_enum;")
    op.execute("DROP TYPE IF EXISTS tree_condition_enum;")
    # ### end Alembic commands ###
